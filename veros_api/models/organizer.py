# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Organizer(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'type': 'int',
        'name': 'str',
        'logo': 'str',
        'url': 'str',
        'country': 'CountryLight',
        'city': 'CityLight',
        'is_partner': 'str'
    }

    attribute_map = {
        'type': 'type',
        'name': 'name',
        'logo': 'logo',
        'url': 'url',
        'country': 'country',
        'city': 'city',
        'is_partner': 'is_partner'
    }

    def __init__(self, type=None, name=None, logo=None, url=None, country=None, city=None, is_partner=None):  # noqa: E501
        """Organizer - a model defined in OpenAPI"""  # noqa: E501

        self._type = None
        self._name = None
        self._logo = None
        self._url = None
        self._country = None
        self._city = None
        self._is_partner = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if logo is not None:
            self.logo = logo
        if url is not None:
            self.url = url
        if country is not None:
            self.country = country
        if city is not None:
            self.city = city
        if is_partner is not None:
            self.is_partner = is_partner

    @property
    def type(self):
        """Gets the type of this Organizer.  # noqa: E501


        :return: The type of this Organizer.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Organizer.


        :param type: The type of this Organizer.  # noqa: E501
        :type: int
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this Organizer.  # noqa: E501


        :return: The name of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organizer.


        :param name: The name of this Organizer.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def logo(self):
        """Gets the logo of this Organizer.  # noqa: E501


        :return: The logo of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Organizer.


        :param logo: The logo of this Organizer.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def url(self):
        """Gets the url of this Organizer.  # noqa: E501


        :return: The url of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Organizer.


        :param url: The url of this Organizer.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def country(self):
        """Gets the country of this Organizer.  # noqa: E501


        :return: The country of this Organizer.  # noqa: E501
        :rtype: CountryLight
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Organizer.


        :param country: The country of this Organizer.  # noqa: E501
        :type: CountryLight
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this Organizer.  # noqa: E501


        :return: The city of this Organizer.  # noqa: E501
        :rtype: CityLight
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organizer.


        :param city: The city of this Organizer.  # noqa: E501
        :type: CityLight
        """

        self._city = city

    @property
    def is_partner(self):
        """Gets the is_partner of this Organizer.  # noqa: E501


        :return: The is_partner of this Organizer.  # noqa: E501
        :rtype: str
        """
        return self._is_partner

    @is_partner.setter
    def is_partner(self, is_partner):
        """Sets the is_partner of this Organizer.


        :param is_partner: The is_partner of this Organizer.  # noqa: E501
        :type: str
        """

        self._is_partner = is_partner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Organizer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
