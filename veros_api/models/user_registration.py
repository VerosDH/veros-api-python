# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'is_agree_with_agreement': 'bool',
        'password1': 'str',
        'password2': 'str'
    }

    attribute_map = {
        'email': 'email',
        'is_agree_with_agreement': 'is_agree_with_agreement',
        'password1': 'password1',
        'password2': 'password2'
    }

    def __init__(self, email=None, is_agree_with_agreement=None, password1=None, password2=None):  # noqa: E501
        """UserRegistration - a model defined in OpenAPI"""  # noqa: E501

        self._email = None
        self._is_agree_with_agreement = None
        self._password1 = None
        self._password2 = None
        self.discriminator = None

        if email is not None:
            self.email = email
        self.is_agree_with_agreement = is_agree_with_agreement
        self.password1 = password1
        self.password2 = password2

    @property
    def email(self):
        """Gets the email of this UserRegistration.  # noqa: E501


        :return: The email of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRegistration.


        :param email: The email of this UserRegistration.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def is_agree_with_agreement(self):
        """Gets the is_agree_with_agreement of this UserRegistration.  # noqa: E501


        :return: The is_agree_with_agreement of this UserRegistration.  # noqa: E501
        :rtype: bool
        """
        return self._is_agree_with_agreement

    @is_agree_with_agreement.setter
    def is_agree_with_agreement(self, is_agree_with_agreement):
        """Sets the is_agree_with_agreement of this UserRegistration.


        :param is_agree_with_agreement: The is_agree_with_agreement of this UserRegistration.  # noqa: E501
        :type: bool
        """
        if is_agree_with_agreement is None:
            raise ValueError("Invalid value for `is_agree_with_agreement`, must not be `None`")  # noqa: E501

        self._is_agree_with_agreement = is_agree_with_agreement

    @property
    def password1(self):
        """Gets the password1 of this UserRegistration.  # noqa: E501


        :return: The password1 of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._password1

    @password1.setter
    def password1(self, password1):
        """Sets the password1 of this UserRegistration.


        :param password1: The password1 of this UserRegistration.  # noqa: E501
        :type: str
        """
        if password1 is None:
            raise ValueError("Invalid value for `password1`, must not be `None`")  # noqa: E501
        if password1 is not None and len(password1) < 1:
            raise ValueError("Invalid value for `password1`, length must be greater than or equal to `1`")  # noqa: E501

        self._password1 = password1

    @property
    def password2(self):
        """Gets the password2 of this UserRegistration.  # noqa: E501


        :return: The password2 of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._password2

    @password2.setter
    def password2(self, password2):
        """Sets the password2 of this UserRegistration.


        :param password2: The password2 of this UserRegistration.  # noqa: E501
        :type: str
        """
        if password2 is None:
            raise ValueError("Invalid value for `password2`, must not be `None`")  # noqa: E501
        if password2 is not None and len(password2) < 1:
            raise ValueError("Invalid value for `password2`, length must be greater than or equal to `1`")  # noqa: E501

        self._password2 = password2

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRegistration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
