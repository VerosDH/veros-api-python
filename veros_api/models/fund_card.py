# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class FundCard(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'author': 'UserLight',
        'title': 'str',
        'short_description': 'str',
        'full_description': 'str',
        'url': 'str',
        'country': 'CountryLight',
        'city': 'CityLight',
        'fundraising_type': 'FundraisingType',
        'directions': 'list[Direction]',
        'organization': 'OrganizationLight',
        'payment_types': 'list[PaymentType]',
        'cover': 'str',
        'cover_thumbnail': 'str',
        'expiration_date': 'date',
        'created_at': 'datetime',
        'disabled': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'author': 'author',
        'title': 'title',
        'short_description': 'short_description',
        'full_description': 'full_description',
        'url': 'url',
        'country': 'country',
        'city': 'city',
        'fundraising_type': 'fundraising_type',
        'directions': 'directions',
        'organization': 'organization',
        'payment_types': 'payment_types',
        'cover': 'cover',
        'cover_thumbnail': 'cover_thumbnail',
        'expiration_date': 'expiration_date',
        'created_at': 'created_at',
        'disabled': 'disabled'
    }

    def __init__(self, id=None, author=None, title=None, short_description=None, full_description=None, url=None, country=None, city=None, fundraising_type=None, directions=None, organization=None, payment_types=None, cover=None, cover_thumbnail=None, expiration_date=None, created_at=None, disabled=None):  # noqa: E501
        """FundCard - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._author = None
        self._title = None
        self._short_description = None
        self._full_description = None
        self._url = None
        self._country = None
        self._city = None
        self._fundraising_type = None
        self._directions = None
        self._organization = None
        self._payment_types = None
        self._cover = None
        self._cover_thumbnail = None
        self._expiration_date = None
        self._created_at = None
        self._disabled = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.author = author
        self.title = title
        self.short_description = short_description
        self.full_description = full_description
        self.url = url
        self.country = country
        self.city = city
        self.fundraising_type = fundraising_type
        self.directions = directions
        self.organization = organization
        self.payment_types = payment_types
        if cover is not None:
            self.cover = cover
        if cover_thumbnail is not None:
            self.cover_thumbnail = cover_thumbnail
        self.expiration_date = expiration_date
        if created_at is not None:
            self.created_at = created_at
        if disabled is not None:
            self.disabled = disabled

    @property
    def id(self):
        """Gets the id of this FundCard.  # noqa: E501


        :return: The id of this FundCard.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FundCard.


        :param id: The id of this FundCard.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def author(self):
        """Gets the author of this FundCard.  # noqa: E501


        :return: The author of this FundCard.  # noqa: E501
        :rtype: UserLight
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this FundCard.


        :param author: The author of this FundCard.  # noqa: E501
        :type: UserLight
        """
        if author is None:
            raise ValueError("Invalid value for `author`, must not be `None`")  # noqa: E501

        self._author = author

    @property
    def title(self):
        """Gets the title of this FundCard.  # noqa: E501


        :return: The title of this FundCard.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this FundCard.


        :param title: The title of this FundCard.  # noqa: E501
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501
        if title is not None and len(title) > 128:
            raise ValueError("Invalid value for `title`, length must be less than or equal to `128`")  # noqa: E501
        if title is not None and len(title) < 1:
            raise ValueError("Invalid value for `title`, length must be greater than or equal to `1`")  # noqa: E501

        self._title = title

    @property
    def short_description(self):
        """Gets the short_description of this FundCard.  # noqa: E501


        :return: The short_description of this FundCard.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this FundCard.


        :param short_description: The short_description of this FundCard.  # noqa: E501
        :type: str
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")  # noqa: E501
        if short_description is not None and len(short_description) > 128:
            raise ValueError("Invalid value for `short_description`, length must be less than or equal to `128`")  # noqa: E501
        if short_description is not None and len(short_description) < 1:
            raise ValueError("Invalid value for `short_description`, length must be greater than or equal to `1`")  # noqa: E501

        self._short_description = short_description

    @property
    def full_description(self):
        """Gets the full_description of this FundCard.  # noqa: E501


        :return: The full_description of this FundCard.  # noqa: E501
        :rtype: str
        """
        return self._full_description

    @full_description.setter
    def full_description(self, full_description):
        """Sets the full_description of this FundCard.


        :param full_description: The full_description of this FundCard.  # noqa: E501
        :type: str
        """
        if full_description is None:
            raise ValueError("Invalid value for `full_description`, must not be `None`")  # noqa: E501
        if full_description is not None and len(full_description) < 1:
            raise ValueError("Invalid value for `full_description`, length must be greater than or equal to `1`")  # noqa: E501

        self._full_description = full_description

    @property
    def url(self):
        """Gets the url of this FundCard.  # noqa: E501


        :return: The url of this FundCard.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FundCard.


        :param url: The url of this FundCard.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if url is not None and len(url) > 200:
            raise ValueError("Invalid value for `url`, length must be less than or equal to `200`")  # noqa: E501
        if url is not None and len(url) < 1:
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501

        self._url = url

    @property
    def country(self):
        """Gets the country of this FundCard.  # noqa: E501


        :return: The country of this FundCard.  # noqa: E501
        :rtype: CountryLight
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this FundCard.


        :param country: The country of this FundCard.  # noqa: E501
        :type: CountryLight
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def city(self):
        """Gets the city of this FundCard.  # noqa: E501


        :return: The city of this FundCard.  # noqa: E501
        :rtype: CityLight
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this FundCard.


        :param city: The city of this FundCard.  # noqa: E501
        :type: CityLight
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")  # noqa: E501

        self._city = city

    @property
    def fundraising_type(self):
        """Gets the fundraising_type of this FundCard.  # noqa: E501


        :return: The fundraising_type of this FundCard.  # noqa: E501
        :rtype: FundraisingType
        """
        return self._fundraising_type

    @fundraising_type.setter
    def fundraising_type(self, fundraising_type):
        """Sets the fundraising_type of this FundCard.


        :param fundraising_type: The fundraising_type of this FundCard.  # noqa: E501
        :type: FundraisingType
        """
        if fundraising_type is None:
            raise ValueError("Invalid value for `fundraising_type`, must not be `None`")  # noqa: E501

        self._fundraising_type = fundraising_type

    @property
    def directions(self):
        """Gets the directions of this FundCard.  # noqa: E501


        :return: The directions of this FundCard.  # noqa: E501
        :rtype: list[Direction]
        """
        return self._directions

    @directions.setter
    def directions(self, directions):
        """Sets the directions of this FundCard.


        :param directions: The directions of this FundCard.  # noqa: E501
        :type: list[Direction]
        """
        if directions is None:
            raise ValueError("Invalid value for `directions`, must not be `None`")  # noqa: E501

        self._directions = directions

    @property
    def organization(self):
        """Gets the organization of this FundCard.  # noqa: E501


        :return: The organization of this FundCard.  # noqa: E501
        :rtype: OrganizationLight
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this FundCard.


        :param organization: The organization of this FundCard.  # noqa: E501
        :type: OrganizationLight
        """
        if organization is None:
            raise ValueError("Invalid value for `organization`, must not be `None`")  # noqa: E501

        self._organization = organization

    @property
    def payment_types(self):
        """Gets the payment_types of this FundCard.  # noqa: E501


        :return: The payment_types of this FundCard.  # noqa: E501
        :rtype: list[PaymentType]
        """
        return self._payment_types

    @payment_types.setter
    def payment_types(self, payment_types):
        """Sets the payment_types of this FundCard.


        :param payment_types: The payment_types of this FundCard.  # noqa: E501
        :type: list[PaymentType]
        """
        if payment_types is None:
            raise ValueError("Invalid value for `payment_types`, must not be `None`")  # noqa: E501

        self._payment_types = payment_types

    @property
    def cover(self):
        """Gets the cover of this FundCard.  # noqa: E501


        :return: The cover of this FundCard.  # noqa: E501
        :rtype: str
        """
        return self._cover

    @cover.setter
    def cover(self, cover):
        """Sets the cover of this FundCard.


        :param cover: The cover of this FundCard.  # noqa: E501
        :type: str
        """

        self._cover = cover

    @property
    def cover_thumbnail(self):
        """Gets the cover_thumbnail of this FundCard.  # noqa: E501


        :return: The cover_thumbnail of this FundCard.  # noqa: E501
        :rtype: str
        """
        return self._cover_thumbnail

    @cover_thumbnail.setter
    def cover_thumbnail(self, cover_thumbnail):
        """Sets the cover_thumbnail of this FundCard.


        :param cover_thumbnail: The cover_thumbnail of this FundCard.  # noqa: E501
        :type: str
        """

        self._cover_thumbnail = cover_thumbnail

    @property
    def expiration_date(self):
        """Gets the expiration_date of this FundCard.  # noqa: E501


        :return: The expiration_date of this FundCard.  # noqa: E501
        :rtype: date
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this FundCard.


        :param expiration_date: The expiration_date of this FundCard.  # noqa: E501
        :type: date
        """

        self._expiration_date = expiration_date

    @property
    def created_at(self):
        """Gets the created_at of this FundCard.  # noqa: E501


        :return: The created_at of this FundCard.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this FundCard.


        :param created_at: The created_at of this FundCard.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def disabled(self):
        """Gets the disabled of this FundCard.  # noqa: E501


        :return: The disabled of this FundCard.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this FundCard.


        :param disabled: The disabled of this FundCard.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FundCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
