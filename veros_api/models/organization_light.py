# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class OrganizationLight(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'short_name': 'str',
        'city': 'str',
        'country': 'str',
        'logo': 'str',
        'logo_128x128': 'str',
        'link': 'str'
    }

    attribute_map = {
        'id': 'id',
        'short_name': 'short_name',
        'city': 'city',
        'country': 'country',
        'logo': 'logo',
        'logo_128x128': 'logo_128x128',
        'link': 'link'
    }

    def __init__(self, id=None, short_name=None, city=None, country=None, logo=None, logo_128x128=None, link=None):  # noqa: E501
        """OrganizationLight - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._short_name = None
        self._city = None
        self._country = None
        self._logo = None
        self._logo_128x128 = None
        self._link = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.short_name = short_name
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        self.logo = logo
        if logo_128x128 is not None:
            self.logo_128x128 = logo_128x128
        if link is not None:
            self.link = link

    @property
    def id(self):
        """Gets the id of this OrganizationLight.  # noqa: E501


        :return: The id of this OrganizationLight.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OrganizationLight.


        :param id: The id of this OrganizationLight.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def short_name(self):
        """Gets the short_name of this OrganizationLight.  # noqa: E501


        :return: The short_name of this OrganizationLight.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this OrganizationLight.


        :param short_name: The short_name of this OrganizationLight.  # noqa: E501
        :type: str
        """
        if short_name is None:
            raise ValueError("Invalid value for `short_name`, must not be `None`")  # noqa: E501
        if short_name is not None and len(short_name) > 128:
            raise ValueError("Invalid value for `short_name`, length must be less than or equal to `128`")  # noqa: E501
        if short_name is not None and len(short_name) < 1:
            raise ValueError("Invalid value for `short_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._short_name = short_name

    @property
    def city(self):
        """Gets the city of this OrganizationLight.  # noqa: E501


        :return: The city of this OrganizationLight.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this OrganizationLight.


        :param city: The city of this OrganizationLight.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this OrganizationLight.  # noqa: E501


        :return: The country of this OrganizationLight.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this OrganizationLight.


        :param country: The country of this OrganizationLight.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def logo(self):
        """Gets the logo of this OrganizationLight.  # noqa: E501


        :return: The logo of this OrganizationLight.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this OrganizationLight.


        :param logo: The logo of this OrganizationLight.  # noqa: E501
        :type: str
        """

        self._logo = logo

    @property
    def logo_128x128(self):
        """Gets the logo_128x128 of this OrganizationLight.  # noqa: E501


        :return: The logo_128x128 of this OrganizationLight.  # noqa: E501
        :rtype: str
        """
        return self._logo_128x128

    @logo_128x128.setter
    def logo_128x128(self, logo_128x128):
        """Sets the logo_128x128 of this OrganizationLight.


        :param logo_128x128: The logo_128x128 of this OrganizationLight.  # noqa: E501
        :type: str
        """

        self._logo_128x128 = logo_128x128

    @property
    def link(self):
        """Gets the link of this OrganizationLight.  # noqa: E501


        :return: The link of this OrganizationLight.  # noqa: E501
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this OrganizationLight.


        :param link: The link of this OrganizationLight.  # noqa: E501
        :type: str
        """
        if link is not None and len(link) > 200:
            raise ValueError("Invalid value for `link`, length must be less than or equal to `200`")  # noqa: E501

        self._link = link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrganizationLight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
