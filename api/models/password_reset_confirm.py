# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class PasswordResetConfirm(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'uid': 'str',
        'token': 'str',
        'password': 'str',
        'password_confirm': 'str'
    }

    attribute_map = {
        'uid': 'uid',
        'token': 'token',
        'password': 'password',
        'password_confirm': 'password_confirm'
    }

    def __init__(self, uid=None, token=None, password=None, password_confirm=None):  # noqa: E501
        """PasswordResetConfirm - a model defined in OpenAPI"""  # noqa: E501

        self._uid = None
        self._token = None
        self._password = None
        self._password_confirm = None
        self.discriminator = None

        self.uid = uid
        self.token = token
        self.password = password
        self.password_confirm = password_confirm

    @property
    def uid(self):
        """Gets the uid of this PasswordResetConfirm.  # noqa: E501


        :return: The uid of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._uid

    @uid.setter
    def uid(self, uid):
        """Sets the uid of this PasswordResetConfirm.


        :param uid: The uid of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if uid is None:
            raise ValueError("Invalid value for `uid`, must not be `None`")  # noqa: E501
        if uid is not None and len(uid) < 1:
            raise ValueError("Invalid value for `uid`, length must be greater than or equal to `1`")  # noqa: E501

        self._uid = uid

    @property
    def token(self):
        """Gets the token of this PasswordResetConfirm.  # noqa: E501


        :return: The token of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PasswordResetConfirm.


        :param token: The token of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501
        if token is not None and len(token) < 1:
            raise ValueError("Invalid value for `token`, length must be greater than or equal to `1`")  # noqa: E501

        self._token = token

    @property
    def password(self):
        """Gets the password of this PasswordResetConfirm.  # noqa: E501


        :return: The password of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PasswordResetConfirm.


        :param password: The password of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501
        if password is not None and len(password) > 128:
            raise ValueError("Invalid value for `password`, length must be less than or equal to `128`")  # noqa: E501
        if password is not None and len(password) < 1:
            raise ValueError("Invalid value for `password`, length must be greater than or equal to `1`")  # noqa: E501

        self._password = password

    @property
    def password_confirm(self):
        """Gets the password_confirm of this PasswordResetConfirm.  # noqa: E501


        :return: The password_confirm of this PasswordResetConfirm.  # noqa: E501
        :rtype: str
        """
        return self._password_confirm

    @password_confirm.setter
    def password_confirm(self, password_confirm):
        """Sets the password_confirm of this PasswordResetConfirm.


        :param password_confirm: The password_confirm of this PasswordResetConfirm.  # noqa: E501
        :type: str
        """
        if password_confirm is None:
            raise ValueError("Invalid value for `password_confirm`, must not be `None`")  # noqa: E501
        if password_confirm is not None and len(password_confirm) > 128:
            raise ValueError("Invalid value for `password_confirm`, length must be less than or equal to `128`")  # noqa: E501
        if password_confirm is not None and len(password_confirm) < 1:
            raise ValueError("Invalid value for `password_confirm`, length must be greater than or equal to `1`")  # noqa: E501

        self._password_confirm = password_confirm

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PasswordResetConfirm):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
