# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserFull(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'birthday': 'date',
        'gender': 'str',
        'phone': 'str',
        'email': 'str',
        'photo': 'str',
        'country': 'str',
        'city': 'str',
        'verified': 'bool',
        'is_email_proved': 'bool',
        'use_wallet': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'first_name',
        'middle_name': 'middle_name',
        'last_name': 'last_name',
        'birthday': 'birthday',
        'gender': 'gender',
        'phone': 'phone',
        'email': 'email',
        'photo': 'photo',
        'country': 'country',
        'city': 'city',
        'verified': 'verified',
        'is_email_proved': 'is_email_proved',
        'use_wallet': 'use_wallet'
    }

    def __init__(self, id=None, first_name=None, middle_name=None, last_name=None, birthday=None, gender=None, phone=None, email=None, photo=None, country=None, city=None, verified=None, is_email_proved=None, use_wallet=None):  # noqa: E501
        """UserFull - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._birthday = None
        self._gender = None
        self._phone = None
        self._email = None
        self._photo = None
        self._country = None
        self._city = None
        self._verified = None
        self._is_email_proved = None
        self._use_wallet = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        self.birthday = birthday
        if gender is not None:
            self.gender = gender
        if phone is not None:
            self.phone = phone
        if email is not None:
            self.email = email
        if photo is not None:
            self.photo = photo
        if country is not None:
            self.country = country
        if city is not None:
            self.city = city
        if verified is not None:
            self.verified = verified
        if is_email_proved is not None:
            self.is_email_proved = is_email_proved
        if use_wallet is not None:
            self.use_wallet = use_wallet

    @property
    def id(self):
        """Gets the id of this UserFull.  # noqa: E501


        :return: The id of this UserFull.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserFull.


        :param id: The id of this UserFull.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this UserFull.  # noqa: E501


        :return: The first_name of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserFull.


        :param first_name: The first_name of this UserFull.  # noqa: E501
        :type: str
        """
        if first_name is not None and len(first_name) > 30:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `30`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this UserFull.  # noqa: E501


        :return: The middle_name of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserFull.


        :param middle_name: The middle_name of this UserFull.  # noqa: E501
        :type: str
        """
        if middle_name is not None and len(middle_name) > 30:
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `30`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this UserFull.  # noqa: E501


        :return: The last_name of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserFull.


        :param last_name: The last_name of this UserFull.  # noqa: E501
        :type: str
        """
        if last_name is not None and len(last_name) > 150:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `150`")  # noqa: E501

        self._last_name = last_name

    @property
    def birthday(self):
        """Gets the birthday of this UserFull.  # noqa: E501


        :return: The birthday of this UserFull.  # noqa: E501
        :rtype: date
        """
        return self._birthday

    @birthday.setter
    def birthday(self, birthday):
        """Sets the birthday of this UserFull.


        :param birthday: The birthday of this UserFull.  # noqa: E501
        :type: date
        """

        self._birthday = birthday

    @property
    def gender(self):
        """Gets the gender of this UserFull.  # noqa: E501


        :return: The gender of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this UserFull.


        :param gender: The gender of this UserFull.  # noqa: E501
        :type: str
        """
        allowed_values = ["n", "m", "f"]  # noqa: E501
        if gender not in allowed_values:
            raise ValueError(
                "Invalid value for `gender` ({0}), must be one of {1}"  # noqa: E501
                .format(gender, allowed_values)
            )

        self._gender = gender

    @property
    def phone(self):
        """Gets the phone of this UserFull.  # noqa: E501


        :return: The phone of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this UserFull.


        :param phone: The phone of this UserFull.  # noqa: E501
        :type: str
        """
        if phone is not None and len(phone) < 1:
            raise ValueError("Invalid value for `phone`, length must be greater than or equal to `1`")  # noqa: E501

        self._phone = phone

    @property
    def email(self):
        """Gets the email of this UserFull.  # noqa: E501


        :return: The email of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserFull.


        :param email: The email of this UserFull.  # noqa: E501
        :type: str
        """
        if email is not None and len(email) < 1:
            raise ValueError("Invalid value for `email`, length must be greater than or equal to `1`")  # noqa: E501

        self._email = email

    @property
    def photo(self):
        """Gets the photo of this UserFull.  # noqa: E501


        :return: The photo of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this UserFull.


        :param photo: The photo of this UserFull.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def country(self):
        """Gets the country of this UserFull.  # noqa: E501


        :return: The country of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserFull.


        :param country: The country of this UserFull.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this UserFull.  # noqa: E501


        :return: The city of this UserFull.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserFull.


        :param city: The city of this UserFull.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def verified(self):
        """Gets the verified of this UserFull.  # noqa: E501


        :return: The verified of this UserFull.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this UserFull.


        :param verified: The verified of this UserFull.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def is_email_proved(self):
        """Gets the is_email_proved of this UserFull.  # noqa: E501


        :return: The is_email_proved of this UserFull.  # noqa: E501
        :rtype: bool
        """
        return self._is_email_proved

    @is_email_proved.setter
    def is_email_proved(self, is_email_proved):
        """Sets the is_email_proved of this UserFull.


        :param is_email_proved: The is_email_proved of this UserFull.  # noqa: E501
        :type: bool
        """

        self._is_email_proved = is_email_proved

    @property
    def use_wallet(self):
        """Gets the use_wallet of this UserFull.  # noqa: E501


        :return: The use_wallet of this UserFull.  # noqa: E501
        :rtype: bool
        """
        return self._use_wallet

    @use_wallet.setter
    def use_wallet(self, use_wallet):
        """Sets the use_wallet of this UserFull.


        :param use_wallet: The use_wallet of this UserFull.  # noqa: E501
        :type: bool
        """

        self._use_wallet = use_wallet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserFull):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
