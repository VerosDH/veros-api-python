# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Country(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'code2': 'str',
        'code3': 'str',
        'continent': 'str',
        'tld': 'str',
        'phone': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'code2': 'code2',
        'code3': 'code3',
        'continent': 'continent',
        'tld': 'tld',
        'phone': 'phone'
    }

    def __init__(self, id=None, name=None, code2=None, code3=None, continent=None, tld=None, phone=None):  # noqa: E501
        """Country - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._code2 = None
        self._code3 = None
        self._continent = None
        self._tld = None
        self._phone = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.code2 = code2
        self.code3 = code3
        self.continent = continent
        if tld is not None:
            self.tld = tld
        self.phone = phone

    @property
    def id(self):
        """Gets the id of this Country.  # noqa: E501


        :return: The id of this Country.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Country.


        :param id: The id of this Country.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Country.  # noqa: E501


        :return: The name of this Country.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Country.


        :param name: The name of this Country.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def code2(self):
        """Gets the code2 of this Country.  # noqa: E501


        :return: The code2 of this Country.  # noqa: E501
        :rtype: str
        """
        return self._code2

    @code2.setter
    def code2(self, code2):
        """Sets the code2 of this Country.


        :param code2: The code2 of this Country.  # noqa: E501
        :type: str
        """
        if code2 is not None and len(code2) > 2:
            raise ValueError("Invalid value for `code2`, length must be less than or equal to `2`")  # noqa: E501

        self._code2 = code2

    @property
    def code3(self):
        """Gets the code3 of this Country.  # noqa: E501


        :return: The code3 of this Country.  # noqa: E501
        :rtype: str
        """
        return self._code3

    @code3.setter
    def code3(self, code3):
        """Sets the code3 of this Country.


        :param code3: The code3 of this Country.  # noqa: E501
        :type: str
        """
        if code3 is not None and len(code3) > 3:
            raise ValueError("Invalid value for `code3`, length must be less than or equal to `3`")  # noqa: E501

        self._code3 = code3

    @property
    def continent(self):
        """Gets the continent of this Country.  # noqa: E501


        :return: The continent of this Country.  # noqa: E501
        :rtype: str
        """
        return self._continent

    @continent.setter
    def continent(self, continent):
        """Sets the continent of this Country.


        :param continent: The continent of this Country.  # noqa: E501
        :type: str
        """
        if continent is None:
            raise ValueError("Invalid value for `continent`, must not be `None`")  # noqa: E501
        allowed_values = ["OC", "EU", "AF", "NA", "AN", "SA", "AS"]  # noqa: E501
        if continent not in allowed_values:
            raise ValueError(
                "Invalid value for `continent` ({0}), must be one of {1}"  # noqa: E501
                .format(continent, allowed_values)
            )

        self._continent = continent

    @property
    def tld(self):
        """Gets the tld of this Country.  # noqa: E501


        :return: The tld of this Country.  # noqa: E501
        :rtype: str
        """
        return self._tld

    @tld.setter
    def tld(self, tld):
        """Sets the tld of this Country.


        :param tld: The tld of this Country.  # noqa: E501
        :type: str
        """
        if tld is not None and len(tld) > 5:
            raise ValueError("Invalid value for `tld`, length must be less than or equal to `5`")  # noqa: E501

        self._tld = tld

    @property
    def phone(self):
        """Gets the phone of this Country.  # noqa: E501


        :return: The phone of this Country.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this Country.


        :param phone: The phone of this Country.  # noqa: E501
        :type: str
        """
        if phone is not None and len(phone) > 20:
            raise ValueError("Invalid value for `phone`, length must be less than or equal to `20`")  # noqa: E501

        self._phone = phone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Country):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
