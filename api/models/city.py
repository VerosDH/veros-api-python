# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class City(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'display_name': 'str',
        'country': 'int',
        'feature_code': 'str',
        'timezone': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'display_name': 'display_name',
        'country': 'country',
        'feature_code': 'feature_code',
        'timezone': 'timezone'
    }

    def __init__(self, id=None, name=None, display_name=None, country=None, feature_code=None, timezone=None):  # noqa: E501
        """City - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._name = None
        self._display_name = None
        self._country = None
        self._feature_code = None
        self._timezone = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        self.display_name = display_name
        self.country = country
        self.feature_code = feature_code
        self.timezone = timezone

    @property
    def id(self):
        """Gets the id of this City.  # noqa: E501


        :return: The id of this City.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this City.


        :param id: The id of this City.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this City.  # noqa: E501


        :return: The name of this City.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this City.


        :param name: The name of this City.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 200:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `200`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this City.  # noqa: E501


        :return: The display_name of this City.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this City.


        :param display_name: The display_name of this City.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501
        if display_name is not None and len(display_name) > 200:
            raise ValueError("Invalid value for `display_name`, length must be less than or equal to `200`")  # noqa: E501
        if display_name is not None and len(display_name) < 1:
            raise ValueError("Invalid value for `display_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._display_name = display_name

    @property
    def country(self):
        """Gets the country of this City.  # noqa: E501


        :return: The country of this City.  # noqa: E501
        :rtype: int
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this City.


        :param country: The country of this City.  # noqa: E501
        :type: int
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")  # noqa: E501

        self._country = country

    @property
    def feature_code(self):
        """Gets the feature_code of this City.  # noqa: E501


        :return: The feature_code of this City.  # noqa: E501
        :rtype: str
        """
        return self._feature_code

    @feature_code.setter
    def feature_code(self, feature_code):
        """Sets the feature_code of this City.


        :param feature_code: The feature_code of this City.  # noqa: E501
        :type: str
        """
        if feature_code is not None and len(feature_code) > 10:
            raise ValueError("Invalid value for `feature_code`, length must be less than or equal to `10`")  # noqa: E501

        self._feature_code = feature_code

    @property
    def timezone(self):
        """Gets the timezone of this City.  # noqa: E501


        :return: The timezone of this City.  # noqa: E501
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this City.


        :param timezone: The timezone of this City.  # noqa: E501
        :type: str
        """
        if timezone is not None and len(timezone) > 40:
            raise ValueError("Invalid value for `timezone`, length must be less than or equal to `40`")  # noqa: E501

        self._timezone = timezone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, City):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
