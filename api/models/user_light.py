# coding: utf-8

"""
    Veros API

    Routes of Veros project  # noqa: E501

    The version of the OpenAPI document: v1
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class UserLight(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'first_name': 'str',
        'middle_name': 'str',
        'last_name': 'str',
        'photo': 'str',
        'country': 'str',
        'city': 'str'
    }

    attribute_map = {
        'id': 'id',
        'first_name': 'first_name',
        'middle_name': 'middle_name',
        'last_name': 'last_name',
        'photo': 'photo',
        'country': 'country',
        'city': 'city'
    }

    def __init__(self, id=None, first_name=None, middle_name=None, last_name=None, photo=None, country=None, city=None):  # noqa: E501
        """UserLight - a model defined in OpenAPI"""  # noqa: E501

        self._id = None
        self._first_name = None
        self._middle_name = None
        self._last_name = None
        self._photo = None
        self._country = None
        self._city = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if first_name is not None:
            self.first_name = first_name
        if middle_name is not None:
            self.middle_name = middle_name
        if last_name is not None:
            self.last_name = last_name
        self.photo = photo
        if country is not None:
            self.country = country
        if city is not None:
            self.city = city

    @property
    def id(self):
        """Gets the id of this UserLight.  # noqa: E501


        :return: The id of this UserLight.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserLight.


        :param id: The id of this UserLight.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def first_name(self):
        """Gets the first_name of this UserLight.  # noqa: E501


        :return: The first_name of this UserLight.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserLight.


        :param first_name: The first_name of this UserLight.  # noqa: E501
        :type: str
        """
        if first_name is not None and len(first_name) > 30:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `30`")  # noqa: E501

        self._first_name = first_name

    @property
    def middle_name(self):
        """Gets the middle_name of this UserLight.  # noqa: E501


        :return: The middle_name of this UserLight.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this UserLight.


        :param middle_name: The middle_name of this UserLight.  # noqa: E501
        :type: str
        """
        if middle_name is not None and len(middle_name) > 30:
            raise ValueError("Invalid value for `middle_name`, length must be less than or equal to `30`")  # noqa: E501

        self._middle_name = middle_name

    @property
    def last_name(self):
        """Gets the last_name of this UserLight.  # noqa: E501


        :return: The last_name of this UserLight.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserLight.


        :param last_name: The last_name of this UserLight.  # noqa: E501
        :type: str
        """
        if last_name is not None and len(last_name) > 150:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `150`")  # noqa: E501

        self._last_name = last_name

    @property
    def photo(self):
        """Gets the photo of this UserLight.  # noqa: E501


        :return: The photo of this UserLight.  # noqa: E501
        :rtype: str
        """
        return self._photo

    @photo.setter
    def photo(self, photo):
        """Sets the photo of this UserLight.


        :param photo: The photo of this UserLight.  # noqa: E501
        :type: str
        """

        self._photo = photo

    @property
    def country(self):
        """Gets the country of this UserLight.  # noqa: E501


        :return: The country of this UserLight.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this UserLight.


        :param country: The country of this UserLight.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def city(self):
        """Gets the city of this UserLight.  # noqa: E501


        :return: The city of this UserLight.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this UserLight.


        :param city: The city of this UserLight.  # noqa: E501
        :type: str
        """

        self._city = city

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserLight):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
